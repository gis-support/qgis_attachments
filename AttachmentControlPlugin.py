# -*- coding: utf-8 -*-
"""
/***************************************************************************
 AttachmentControl
                                 A QGIS plugin
 empty
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-19
        git sha              : $Format:%H$
        copyright            : (C) 2019 by GIS Support
        email                : info@gis-support.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QComboBox, QVBoxLayout, QTableWidgetItem,\
    QDialog, QPushButton
from qgis.gui import QgsEditorWidgetWrapper, QgsEditorWidgetFactory,\
    QgsEditorConfigWidget, QgsEditorWidgetRegistry, QgsGui
from PyQt5.QtCore import Qt
from PyQt5 import uic

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
import os.path

class AttachmentControlPlugin():
    def __init__(self, iface):
        self.widget = AttachmentControlWidget('Attachment Control')
        QgsGui.editorWidgetRegistry().registerWidget('attachmentcontrolwidget', self.widget)
        iface._WidgetPlugin = self.widget

    def initGui(self):
        pass

    def unload(self):
        pass

class AttachmentControlWidget(QgsEditorWidgetFactory):
    def __init__(self, name):
        super(AttachmentControlWidget, self).__init__(name)
        self.wrapper = None
        self.dlg = None

    def create(self, vl, fieldIdx, editor, parent):
        self.wrapper = AttachmentControlWidgetWrapper(vl, fieldIdx, editor, parent)
        return self.wrapper

    def configWidget(self, vl, fieldIdx, parent):
        self.dialog = AttachmentControlWidgetDialog(vl, fieldIdx, parent)
        return self.dialog


class AttachmentControlWidgetWrapper(QgsEditorWidgetWrapper):
    def __init__(self, vl, fieldIdx, editor, parent):
        super(AttachmentControlWidgetWrapper, self).__init__(vl, fieldIdx, editor, parent)
        self.editor = editor
        self.parent = parent
        self.wrapperComboBox = None
        self.wrapperListWidget = None
        self.wrapperFeature = None
        self.layer = vl

    def valid(self):
        return 1

    def setFeature(self, feature):
        super(AttachmentControlWidgetWrapper, self).setFeature(feature)
        self.wrapperFeature = feature
        self.populateWidget()

    def value(self):
        cbId = self.wrapperComboBox.currentIndex()
        if cbId > -1:
            return self.wrapperComboBox.itemData(
                self.wrapperCombobox.currentIndex()
            )
        else:
            return 0
    
    def setValue(self, value):
        self.wrapperComboBox.setCurrentIndex(
            self.wrapperComboBox.findData(value)
        )

    def createWidget(self, parent):
        self.wrapperComboBox = QComboBox(parent)
        return self.wrapperComboBox

    def populateWidget(self, editor=None):
        pass

class AttachmentControlWidgetDialog(QgsEditorConfigWidget):
    def __init__(self, vl, fieldIdx, parent):
        super(AttachmentControlWidgetDialog, self).__init__(vl, fieldIdx, parent)
        ui_path = os.path.join(os.path.dirname(__file__), 'gui/ui_attachmentcontrolplugin.ui')
        uic.loadUi(ui_path, self)
        self.dialog = None
        self.parent = parent
        self.btnAdd.clicked.connect(self.addAttachment)
        self.btnDelete.clicked.connect(self.deleteAttachment)
        self.tableWidget.setColumnCount(1)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(511)
        self.tableWidget.setHorizontalHeaderLabels(['Adres URL'])

    def addAttachment(self):
        self.dialog = AttachmentControlAddUrlDialog(self.parent)
        self.dialog.show()

    def deleteAttachment(self):
        pass

    def config(self):
        return {}

    def setConfig(self, config):
        pass

class AttachmentControlAddUrlDialog(QDialog):
    def __init__(self, parent):
        super(AttachmentControlAddUrlDialog, self).__init__(parent)
        ui_path = os.path.join(os.path.dirname(__file__), 'gui/ui_addattachmentdialog.ui')
        uic.loadUi(ui_path, self)
        self.parent = parent
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.btnDialogApply.clicked.connect(self.addUrl)
        self.btnDialogDecline.clicked.connect(self.close)

    def addUrl():
        url = lnDialogUrl.text()
        # maxRow = self.parent.tableWidget.rowCount()
        # self.tableWidget.insertRow(maxRow)
        # self.tableWidget.setItem(maxRow, 0, url)

    def close(self):
        self.reject()